 result←function Dir file;io;untie;comp;tn;t;sub;sdir;emsg;dpath;spath;mlist;⎕TRAP;fixio;used;hold;sig;cn
⍝ Directory management for a FilePlus file.
⍝
⍝ Syntax:
⍝   [result] ← {function} Dir {file} [component]
⍝
⍝   {file} is either a file name (suitable for use with Tie) or a file tie number.
⍝       File names (that are not already tied) are tied & untied with each
⍝       call.  Use of file tie numbers (optionally from Tie) are most
⍝       efficient for multiple calls.
⍝       File names without full paths (drive specification) are assumed to be
⍝       relative to the directory in which ⎕WSID resides.
⍝   {function} is the operation to be performed, selected from:
⍝       '?'     Return a list of all (or selected) existing component names.
⍝               (Results includes [;…;] rank indications on array names)
⍝       '∊'     Return a boolean to indicate whether or not the named component
⍝               or array exists in the file.
⍝       '⍳'     Return the internal component # for a named component (0=None).
⍝               (Including subscripted names but not on whole arrays.)
⍝       '[?]'   Return a sorted list of all (or selected) defined subscript
⍝               names/numbers for a given array.
⍝       '[⍳]'   Return an array of internal component #s for all (or selected)
⍝               subscripts for a given array. This list is returned in the same
⍝               order as '[?]' for the same array name argument.
⍝       '[>]'   Return the value of the subscript immediately following (in ⍋
⍝               order) the subscript that is supplied, or ⍬ if none.
⍝       '[<]'   Return the value of the subscript immediately preceeding (in ⍋
⍝               order) the subscript that is supplied, or ⍬ if none.
⍝       '[+]'   Return a sorted list of all subscripts that use the
⍝               named component subscript(s) as a prefix (as if each ended in a
⍝               wild-card-matching character).
⍝       '↑'     Take control of the named component. An atomic operation that
⍝               returns 0 if the component already exists. Otherwise it defines
⍝               the component and returns a 1. Use as if it were a hardware-level
⍝               test-and-set synchronization operation.
⍝       '↓'     Delete the named (or numbered) component from the file.
⍝               Deleted components are then available for later re-use.
⍝?              (Future thought: Use ↓↓ to also empty the component contents?)
⍝       '≠'     Return a list of all user-reserved component numbers.
⍝       '⍬'     Return a list of all free-space component numbers.
⍝       '⌹'     Validate file directory structure & return unindexed component #s.
⍝       (More mnemonic function codes may be invented in the future.)
⍝   [component] is a component name, used for some {functions}.
⍝       See the description of IO for more details on component names.
⍝       The usage of [component] for the various functions is as follows:
⍝       '?'     Limit the list of component names to ones containing
⍝               (using (1∊⍷)) the given text.  (Optional)
⍝       '∊'     The array name or full component name to be checked.  An array name
⍝               is a subscripted name with an empty subscript indication ('[;…;]').
⍝       '⍳'     The full component name to be located (including complete
⍝               subscripts for array items).
⍝       '[?]'   Provide a component name to be queried for subscript values.
⍝               Include a subscript indication ('[;…;]') after the name with an
⍝               appropriate number of semicolons to indicate the rank of the array.
⍝               Any (optional) subscript value(s) included in this subscript are to
⍝               be used to limit the list of subscripts to those containing
⍝               (using (1∊⍷), not as an exact match) the given text.
⍝       '[⍳]'   Provide a component name to be queried for component numbers.
⍝               Include a subscript indication ('[;…;]') after the name with an
⍝               appropriate number of semicolons to indicate the rank of the array.
⍝               Any (optional) subscript value(s) included in this subscript are to
⍝               be used to limit the list of subscripts to those containing
⍝               (using (1∊⍷), not as an exact match) the given text.
⍝       '[>]'   The full component name, including subscript, to be used as the
⍝               predecessor item. (All-empty subscript requests the lowest key.)
⍝       '[<]'   The full component name, including subscript, to be used as the
⍝               successor item. (All-empty subscript requests the highest key.)
⍝       '[+]'   Provide a component name plus a subscript, but the subscript is
⍝               not expected to be an exact match. Instead, the provided subscript
⍝               is used as a prefix string and all defined subscripts that begin
⍝               with that prefix (using (⊃⍷) on each dimension) are returned.
⍝               (Numeric subscripts are matched in their entirety.)
⍝       '↑'     The full component name to be acquired.
⍝       '↓'     The full component name (or raw component number) to be deleted.
⍝               If subscript-notation is used without any subscript values
⍝               ('[;…;]'), then ALL subscripts for that name and rank
⍝               will be deleted, otherwise it applies only to a single scalar
⍝               component or array element.
⍝               Unnamed components can be deleted by their raw component number
⍝               and they will then be available for re-use.
⍝
⍝ Written 27 November 2005 by Davin Church of Creative Software Design
⍝ Converted to Dyalog APL 24 April 2021 by Davin Church of Creative Software Design
⍝ Last modified 21 May 2023 by Davin Church of Creative Software Design

 io←(⊃1⌽⎕RSI).⎕IO ⋄ untie←0
 ⎕TRAP←,⊂0 'C' '→Crash' ⍝ Errors should exit via error-handling code
 'Argument Length Error'⎕SIGNAL 5/⍨~(⊂⍴1/file)∊,¨⍳2
 (file comp)←2↑file,'' '' ⍝ Separate arguments

⍝ *** Process the file ID
 :Select 10|⎕DR file
 :CaseList 1 3 5 ⍝ They gave us a file tie number
     ⎕SIGNAL 18/⍨(1≠≢file)∨~(tn←|⊃∊file)∊⎕FNUMS
 :CaseList 0 2 ⍝ They gave us a file name - temporarily tie it
     untie←0⌈tn←Tie file ⋄ tn←|tn ⍝ Tied & ready for use
 :Else
     'Illegal file name or tie number'⎕SIGNAL 18
 :EndSelect

 hold←⌽2 2⊤⌊|⊃∊AutoHold ⍝ Are we providing automatic ⎕FHOLD/:Hold?
 :Hold hold[2]/⊂'FilePlus:',⍕tn ⍝ Conditionally :Hold across application threads
     :If hold[1] ⋄ ⎕FHOLD tn ⋄ :EndIf ⍝ ⎕FHOLD destroys previous ⎕FHOLDs

     ⍝ *** Check the file's master directory to make sure it at least appears to be in our file format
     :If 1≠1⊃⎕FSIZE tn ⋄ :GoTo Signal,sig←23 'Missing master file directory' ⋄ :EndIf
     :If 1=2⊃⎕FSIZE tn
         ⍬(0⍴⊂⍬)⎕FAPPEND tn ⍝ Automatically initialize an empty file
     :ElseIf (⊂t←⎕FREAD tn,1)∊⍬''
         ⍬(0⍴⊂⍬)⎕FREPLACE tn,1 ⍝ Correct empty user-created directory
     :ElseIf (,2)≢⍴t ⍝ Does it look about right?
     :OrIf ~(∧/1=(≢⍴)¨t)∧(1≤|≡2⊃t)∧(1=|≡1⊃t)∧1 3∊⍨10|⎕DR 1⊃t
         :GoTo Signal,sig←23 'Invalid master file directory'
     :EndIf

     ⍝ *** Component ID processing
     sub←⍬ ⍝ Allow subscript specifications after names...
     :If (0=≢⍴comp)∧5 7∊⍨10|⎕DR comp ⋄ :AndIf comp=⌊|comp ⋄ comp←⌊comp ⋄ :EndIf
     :If (0=≢⍴comp)∧1 3∊⍨10|⎕DR comp ⍝ They gave us a raw component number (for use like a normal file)
         ⍝ We don't need to do anything here - just leave it as-is
     :Else ⍝ They gave us a component name (almost any structure permitted)
         ⍝ *** Named component analysis
         ⍝ Simple scalars (of all non-integer types) are reserved for internal use
         :If 0=≡comp ⋄ comp←,comp ⋄ :EndIf ⍝ Force scalars to 1⍴ vectors
         ⍝ *** Pre-process component name (including subscripts)
         sub←io _subscript comp ⋄ comp←⊃sub ⋄ sub↓⍨←1 ⍝ Allow subscript specifications after names
     :EndIf
     :If (0=≢⍴comp)∧1 3∊⍨10|⎕DR comp ⍝ They gave us a raw component number
     :AndIf ~∨/'↓'∊function          ⍝ Raw component numbers may only be used with '↓'
         :GoTo Signal,sig←11 'A raw component number may not be used with this function'
     :EndIf

     ⍝ *** Process function
     :Select ⊃function←,function

     :Case '?'               ⍝ === Directory list (of master directory)
         :If ×≢sub ⋄ :GoTo Signal,sig←2 'Invalid use of subscripting' ⋄ :EndIf ⍝ Should we allow rank-searching??
         result←(2⊃1(tn _list 1)comp)~⎕ucs 0 127 ⍝ Return only master name list (optionally restricted by component-name content)

     :CaseList '∊⍳↑'         ⍝ === Check for existence; Locate cmp #; Take control of cmp
         :If 0∊⍴comp ⋄ :GoTo Signal,sig←2 'Component name missing' ⋄ :EndIf
         :If ∧/0 1∊×≢¨sub ⋄ :GoTo Signal,sig←2 'Incomplete component subscript' ⋄ :EndIf
         :If (0∊≢¨sub)∧'⍳'=⊃function ⋄ :GoTo Signal,sig←16 'Whole arrays do not have component numbers' ⋄ :EndIf
         :If (0∊≢¨sub)∧'↑'=⊃function ⋄ :GoTo Signal,sig←16 'Whole arrays cannot be acquired' ⋄ :EndIf
         :If 0=sdir←⊃result←dpath←(tn _find(¯1*~'↑'∊function))comp
             :If ~'↑'∊function ⋄ result←0 ⋄ :EndIf ⍝ This component name is not defined with that rank
         :Else
             ⍝ *** Named component exists - locate it
             :If ×≢sub ⍝ If we've got subscripts, then we'll have a subdirectory
             :AndIf ∧/×≢¨sub ⍝ And they've specified an explicit subscript?
                 result←spath←(tn _find(-sdir))sub
             :EndIf
         :EndIf
         :Select ⊃function
         :Case '∊'          ⍝ Signal presence only
             result←×⊃result
         :Case '⍳'          ⍝ Return component # (or 0)
             result←⊃result
         :Case '↑'          ⍝ Take control of component
             :If 0=⊃result   ⍝ Not defined yet - define it to signal control
                 :If ×≢sub ⍝ Is this for a subdirectory?
                     :If 0=⊃dpath ⍝ We don't even have a subdirectory yet (not found in master directory)
                         cn←tn _append ⍬(0⍴⊂⍬) ⍝ Create a new (empty) subdirectory component
                         cn(tn _insert dpath)comp ⍝ And add it to the master directory
                         spath←(tn _find cn)sub ⍝ Get a not-found pointer into the new (empty) subdirectory
                     :EndIf
                     cn←tn _append ⍬ ⍝ Create a new data component
                     cn(tn _insert spath)sub ⍝ And add it to the (possibly new) subdirectory
                 :Else ⍝ Create a new scalar component
                     cn←tn _append ⍬ ⍝ Create a new data component
                     cn(tn _insert dpath)comp ⍝ And add it to the master directory
                 :EndIf
                 result←1 ⍝ Signal that component # has been acquired
             :Else           ⍝ Already defined - signal failure to take control
                 result←0
             :EndIf
         :EndSelect

     :Case '['               ⍝ === Functions for subscripted arrays
         :If 0∊⍴comp ⋄ :GoTo Signal,sig←2 'Component name missing' ⋄ :EndIf
         :If ×≢sub ⍝ Were there the required rank-indicators (at least) on the name?
             :If io=0 ⋄ fixio←{1 3∊⍨10|⎕DR ⍵:⍵-1 ⋄ ⍵} ⋄ :Else ⋄ fixio←⊢ ⋄ :EndIf ⍝ Report ⎕IO=0 back in that origin
             :If 0=sdir←⊃(tn _find ¯1)comp
                 result←⍬ ⍝ This component name is not defined with that rank
             :Else
                 :Select function ⍝ Perform the specifically-requested array function
                 :Case '[?]' ⍝ Are they asking for the entire key list?
                     result←2⊃(2×∨/×≢¨sub)(tn _list sdir)sub
                     ⍝ A list of key values is returned for this function:
                     ⍝   For a 1-D array this is a vector of single sub-values; For an n-D array this is Mixed to an n-column matrix
                     :If 1=≢⊃result ⋄ result←fixio¨⊃¨result ⋄ :Else ⋄ result←fixio¨↑result ⋄ :EndIf
                 :Case '[⍳]' ⍝ Are they asking for component #s only?
                     result←1⊃(2×∨/×≢¨sub)(tn _list sdir)sub
                     ⍝ This is a simple numeric vector
                 :Case '[>]' ⍝ Are they asking for a successor key from this list?
                     result←fixio¨(tn _successor sdir)sub
                     ⍝ Only a single key value is returned for this function:
                     ⍝   For a 1-D array this is Disclosed to a single simple value; For an n-D array this is a [nested] vector of sub-values
                     :If 1=≢result ⋄ result←⊃result ⋄ :EndIf
                 :Case '[<]' ⍝ Are they asking for a predecessor key from this list?
                     result←fixio¨(tn _predecessor sdir)sub
                     ⍝ Only a single key value is returned for this function:
                     ⍝   For a 1-D array this is Disclosed to a single simple value; For an n-D array this is a [nested] vector of sub-values
                     :If 1=≢result ⋄ result←⊃result ⋄ :EndIf
                 :Case '[+]' ⍝ Are they asking for a prefixed-key list?
                     result←2⊃¯2(tn _list sdir)sub
                     ⍝ A list of key values is returned for this function:
                     ⍝   For a 1-D array this is a vector of single sub-values; For an n-D array this is Mixed to an n-column matrix
                     :If 1=≢⊃result ⋄ result←fixio¨⊃¨result ⋄ :Else ⋄ result←fixio¨↑result ⋄ :EndIf
                 :Else
                     :GoTo Signal,sig←11 'Invalid array-subscripting function'
                 :EndSelect
             :EndIf
         :Else
             :GoTo Signal,sig←2 'Component subscript notation missing'
         :EndIf

     :Case '↓'               ⍝ === Delete component
         :If (0=≢⍴comp)∧1 3∊⍨10|⎕DR comp ⍝ They gave us a raw component number (when using unnamed components in the file)
             ⍝ --- Deleting a raw component #
             ⍝ Check to see if they're trying to delete something they're not supposed to
             :If comp=1
                 :GoTo Signal,sig←20 'Unable to delete master file index component'
             :ElseIf (comp<1⊃⎕FSIZE tn)∨comp≥2⊃⎕FSIZE tn
                 :GoTo Signal,sig←20 'Non-existent component number to delete'
             :ElseIf ×t←⊃(tn _find ¯1)⎕UCS 0 ⍝ Do we have any reserved components?
             :AndIf comp∊⎕FREAD tn,t
                 :GoTo Signal,sig←19 'Unable to delete reserved component number'
             :ElseIf ×t←⊃(tn _find ¯1)⎕UCS 127 ⍝ Do we have any freed components?
             :AndIf comp∊⎕FREAD tn,t
                 :GoTo Signal,sig←19 'Unable to delete unused component number'
             :ElseIf comp∊1⊃mlist←(tn _list 1)'' ⍝ Will be a slow check on big files with subscripts, but important for safety
                 :GoTo Signal,sig←19 'Unable to delete named component by number'
             :ElseIf ×≢t←(×1 _keyrank¨2⊃mlist)/2⊃mlist ⍝ Are any of these names subscripted arrays?
                 :For t :In t ⍝ Loop through all subscripted array names ⍝ This can take a while if they're big
                     :Trap 0
                         used←'∞' '∞'(tn _validate(((2⊃mlist){⎕CT←0 ⋄ ⍺⍳⍵}⊂t)⊃1⊃mlist))1 _keyrank t
                     :Else
                         :GoTo Signal,sig←23 'Unable to delete component number from damaged file'
                     :EndTrap
                     :If comp∊used
                         :GoTo Signal,sig←19 'Unable to delete named component array item by number'
                     :EndIf
                 :EndFor
             :EndIf
             tn _free comp ⍝ This component number is OK to release (it's not indexed anywhere)
         :Else
             ⍝ --- Deleting a named component
             :If 0∊⍴comp ⋄ :GoTo Signal,sig←2 'Component name missing' ⋄ :EndIf
             :If ∧/0 1∊×≢¨sub ⋄ :GoTo Signal,sig←2 'Incomplete component subscript' ⋄ :EndIf
             :If 0=⊃dpath←(tn _find ¯1)comp ⋄ :GoTo Signal,sig←20 'Component Value Error' ⋄ :EndIf
             :If 0=≢sub
                 tn _free tn _delete dpath ⍝ Remove non-array component name from the master directory
             :Else
                 :If ∧/0=≢¨sub ⍝ Delete the entire array
                     :Trap 0
                         comp←'∞' '∞'(tn _validate(⊃dpath))≢sub ⍝ Get list of all array data & directory components for freeing
                     :Else
                         :GoTo Signal,sig←23 'Unable to delete array from damaged file'
                     :EndTrap
                     comp∪←tn _delete dpath ⍝ Remove the array name itself from the master directory
                     tn _free comp ⍝ Free all the loose pieces
                 :Else ⍝ Delete just one subscript from the array
                     :If 0=⊃spath←(tn _find(-⊃dpath))sub
                         :GoTo Signal,sig←20 'Component Value Error'
                     :Else
                         tn _free tn _delete spath ⍝ Remove and free B-tree entry and the data component
                         ⍝ If that was the last subscript in the array going away, we need to delete the array, too
                         :If (1=1-⍨≢dpath)∧1=2 2⊃dpath ⍝ Shortcut to avoid checking all cases
                         :AndIf 0=⊃(tn _lowest(⊃dpath))⍬ ⍝ See if there's an initial key available
                             tn _free tn _delete dpath ⍝ Get rid of the array name itself from the master directory
                         :EndIf
                     :EndIf
                 :EndIf
             :EndIf
         :EndIf

     :Case '≠'               ⍝ === Reserved component list
         :If (,0)≢⍴comp ⋄ :GoTo Signal,sig←2 'Component name not permitted' ⋄ :EndIf
         :If 0=t←⊃(tn _find ¯1)⎕UCS 0 ⍝ Do we have any reserved components?
             result←⍬ ⍝ Nope
         :Else
             result←⎕FREAD tn,t ⍝ These are they
         :EndIf

     :Case '⍬'               ⍝ === Free-space (available) component list
         :If (,0)≢⍴comp ⋄ :GoTo Signal,sig←2 'Component name not permitted' ⋄ :EndIf
         :If 0=t←⊃(tn _find ¯1)⎕UCS 127 ⍝ Do we have any free-space components?
             result←⍬ ⍝ Nope
         :Else
             result←{⍵[⍋⍵]}⎕FREAD tn,t ⍝ These are they (sorted)
         :EndIf

     :Case '⌹'               ⍝ === Validate directory; return unindexed cmp #s
         :If (,0)≢⍴comp ⋄ :GoTo Signal,sig←2 'Component name not permitted' ⋄ :EndIf
         ⍝ Validate B-tree file root and all connected trees, and return entire list of indexed file components
         ⍝ If an error is detected, _validate will ⎕SIGNAL the problem which will be passed upwards by ⎕TRAP
         result←'∞' '∞'(tn _validate 1)¯1 ⍝ Start at the top and walk all the trees in the file
         ⍝ Ok, we've got the list of all known-used component #s - check them for validity
         :If ∨/t←(result<1⊃⎕FSIZE tn)∨(result≥2⊃⎕FSIZE tn)∨(result≠⌊|result)∨~1 3∊⍨10|⎕DR result
             :GoTo Signal,sig←23('Damaged file!  Invalid component numbers: ',⍕t/result)
         :EndIf
         :If ∨/t←~≠result ⍝ Are there any duplicates?
             :GoTo Signal,sig←23('Damaged file!  Cross-linked components: ',⍕∪t/result)
         :EndIf
         ⍝ The final indexed list looks OK, so return the opposing list of all the (other) un-indexed (manual) component #s
         result~⍨←⍳¯1+2⊃⎕FSIZE tn

     :Else
         :GoTo Signal,sig←11 'Unknown function request'
     :EndSelect
 :EndHold

 ⎕FUNTIE untie ⍝ Untie any temporary file tie when we're done
 :If hold[1] ⋄ ⎕FHOLD ⍬ ⋄ :EndIf ⍝ All ⎕FHOLDs may be released
 :Return

Signal:⎕FUNTIE untie ⍝ Untie any temporary file tie when we exit with an error
 :If hold[1] ⋄ ⎕FHOLD ⍬ ⋄ :EndIf ⍝ All ⎕FHOLDs may be released
 ⎕SIGNAL/⌽sig ⍝ Produce a specific APL error (⎕EN,⎕DM)

Crash:⎕FUNTIE untie ⍝ Untie any temporary file tie when we get an error
 :If hold[1] ⋄ ⎕FHOLD ⍬ ⋄ :EndIf ⍝ All ⎕FHOLDs may be released
 (⊃⎕DM)⎕SIGNAL ⎕EN ⍝ Pass any errors upwards to caller
